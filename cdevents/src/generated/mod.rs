// code generated by cdevents/sdk-rust/generator (mod.hbs)
mod artifact_packaged_subject;
mod artifact_published_subject;
mod artifact_signed_subject;
mod branch_created_subject;
mod branch_deleted_subject;
mod build_finished_subject;
mod build_queued_subject;
mod build_started_subject;
mod change_abandoned_subject;
mod change_created_subject;
mod change_merged_subject;
mod change_reviewed_subject;
mod change_updated_subject;
mod environment_created_subject;
mod environment_deleted_subject;
mod environment_modified_subject;
mod incident_detected_subject;
mod incident_reported_subject;
mod incident_resolved_subject;
mod pipeline_run_finished_subject;
mod pipeline_run_queued_subject;
mod pipeline_run_started_subject;
mod repository_created_subject;
mod repository_deleted_subject;
mod repository_modified_subject;
mod service_deployed_subject;
mod service_published_subject;
mod service_removed_subject;
mod service_rolledback_subject;
mod service_upgraded_subject;
mod task_run_finished_subject;
mod task_run_started_subject;
mod test_case_run_finished_subject;
mod test_case_run_queued_subject;
mod test_case_run_started_subject;
mod test_output_published_subject;
mod test_suite_finished_subject;
mod test_suite_run_queued_subject;
mod test_suite_run_started_subject;

use serde::{Serialize, Deserialize};

#[derive(Debug,Clone,Serialize,Deserialize)]
#[serde(untagged)] // TODO how to use content of context.type as discriminator ?
pub enum Subject {
    ArtifactPackagedSubject(artifact_packaged_subject::ArtifactPackagedSubject),
    ArtifactPublishedSubject(artifact_published_subject::ArtifactPublishedSubject),
    ArtifactSignedSubject(artifact_signed_subject::ArtifactSignedSubject),
    BranchCreatedSubject(branch_created_subject::BranchCreatedSubject),
    BranchDeletedSubject(branch_deleted_subject::BranchDeletedSubject),
    BuildFinishedSubject(build_finished_subject::BuildFinishedSubject),
    BuildQueuedSubject(build_queued_subject::BuildQueuedSubject),
    BuildStartedSubject(build_started_subject::BuildStartedSubject),
    ChangeAbandonedSubject(change_abandoned_subject::ChangeAbandonedSubject),
    ChangeCreatedSubject(change_created_subject::ChangeCreatedSubject),
    ChangeMergedSubject(change_merged_subject::ChangeMergedSubject),
    ChangeReviewedSubject(change_reviewed_subject::ChangeReviewedSubject),
    ChangeUpdatedSubject(change_updated_subject::ChangeUpdatedSubject),
    EnvironmentCreatedSubject(environment_created_subject::EnvironmentCreatedSubject),
    EnvironmentDeletedSubject(environment_deleted_subject::EnvironmentDeletedSubject),
    EnvironmentModifiedSubject(environment_modified_subject::EnvironmentModifiedSubject),
    IncidentDetectedSubject(incident_detected_subject::IncidentDetectedSubject),
    IncidentReportedSubject(incident_reported_subject::IncidentReportedSubject),
    IncidentResolvedSubject(incident_resolved_subject::IncidentResolvedSubject),
    PipelineRunFinishedSubject(pipeline_run_finished_subject::PipelineRunFinishedSubject),
    PipelineRunQueuedSubject(pipeline_run_queued_subject::PipelineRunQueuedSubject),
    PipelineRunStartedSubject(pipeline_run_started_subject::PipelineRunStartedSubject),
    RepositoryCreatedSubject(repository_created_subject::RepositoryCreatedSubject),
    RepositoryDeletedSubject(repository_deleted_subject::RepositoryDeletedSubject),
    RepositoryModifiedSubject(repository_modified_subject::RepositoryModifiedSubject),
    ServiceDeployedSubject(service_deployed_subject::ServiceDeployedSubject),
    ServicePublishedSubject(service_published_subject::ServicePublishedSubject),
    ServiceRemovedSubject(service_removed_subject::ServiceRemovedSubject),
    ServiceRolledbackSubject(service_rolledback_subject::ServiceRolledbackSubject),
    ServiceUpgradedSubject(service_upgraded_subject::ServiceUpgradedSubject),
    TaskRunFinishedSubject(task_run_finished_subject::TaskRunFinishedSubject),
    TaskRunStartedSubject(task_run_started_subject::TaskRunStartedSubject),
    TestCaseRunFinishedSubject(test_case_run_finished_subject::TestCaseRunFinishedSubject),
    TestCaseRunQueuedSubject(test_case_run_queued_subject::TestCaseRunQueuedSubject),
    TestCaseRunStartedSubject(test_case_run_started_subject::TestCaseRunStartedSubject),
    TestOutputPublishedSubject(test_output_published_subject::TestOutputPublishedSubject),
    TestSuiteFinishedSubject(test_suite_finished_subject::TestSuiteFinishedSubject),
    TestSuiteRunQueuedSubject(test_suite_run_queued_subject::TestSuiteRunQueuedSubject),
    TestSuiteRunStartedSubject(test_suite_run_started_subject::TestSuiteRunStartedSubject),
}
