// @generated
// by cdevents/sdk-rust/generator (mod.hbs)

use serde::de::Error;

{{#each variants }}
pub mod {{this.rust_module}};
{{/each}}

use serde::{Serialize, Deserialize};

{{#each variants }}
pub const {{to_screaming_snake_case this.rust_module}}: &str = "{{ this.context_type }}";
{{/each}}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
#[serde(untagged)] // TODO how to use content of context.type as discriminator ?
pub enum Content {
    {{#each variants }}
    {{to_class_case this.rust_module}}({{this.rust_module}}::Content),
    {{/each}}
}

impl Content {
    pub fn from_json(ty: &str, json: serde_json::Value) -> Result<Self, serde_json::Error>{
        match ty {
            {{#each variants }}
            {{to_screaming_snake_case this.rust_module}} => {
                let variant: {{this.rust_module}}::Content = serde_json::from_value(json)?;
                Ok(Self::{{to_class_case this.rust_module}}(variant))
            },
            {{/each}}
            variant => Err(serde_json::Error::custom(format_args!(
                "unknown variant `{}`, expected 'dev.cdevents.\{{subject}}.\{{predicate}}.\{{version}}'",
                variant,
            ))),
        }
    }
}
