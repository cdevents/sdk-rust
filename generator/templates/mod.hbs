// @generated
// by cdevents/sdk-rust/generator (mod.hbs)

use serde::{Serialize, Deserialize, de::Error};

{{#each variants }}
pub mod {{this.rust_module}};
{{/each}}

{{#each variants_per_specs }}
pub mod {{@key}} {
    {{#each this }}
    pub use super::{{this.0}} as {{this.1}};
    {{/each}}
}
{{/each}}

{{#each variants }}
pub const {{to_screaming_snake_case this.rust_module}}: &str = "{{ this.context_type }}";
{{/each}}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
#[serde(untagged)] // TODO how to use content of context.type as discriminator ?
pub enum Content {
    {{#each variants }}
    {{to_class_case this.rust_module}}({{this.rust_module}}::Content),
    {{/each}}
}

impl Content {
    pub fn from_json(ty: &str, json: serde_json::Value) -> Result<Self, serde_json::Error>{
        match ty {
            {{#each variants }}
            {{to_screaming_snake_case this.rust_module}} => {
                let variant: {{this.rust_module}}::Content = serde_json::from_value(json)?;
                Ok(variant.into())
            },
            {{/each}}
            variant => Err(serde_json::Error::custom(format_args!(
                "unknown variant `{}`, expected 'dev.cdevents.\{{subject}}.\{{predicate}}.\{{version}}'",
                variant,
            ))),
        }
    }

    pub fn ty(&self) -> &'static str {
        match self {
            {{#each variants }}
            Self::{{to_class_case this.rust_module}}(_) => {{to_screaming_snake_case this.rust_module}},
            {{/each}}
        }
    }

    pub fn subject(&self) -> &'static str {
        match self {
            {{#each variants }}
            Self::{{to_class_case this.rust_module}}(_) => "{{ this.subject_type }}",
            {{/each}}
        }
    }

    pub fn predicate(&self) -> &'static str {
        match self {
            {{#each variants }}
            Self::{{to_class_case this.rust_module}}(_) => "{{ this.predicate }}",
            {{/each}}
        }
    }
}

// due to inconstency in case/format the subject could be not be extracted from the context.type (ty), jsonshema $id, spec filename (shema, examples)
pub fn extract_subject_predicate(ty: &str) -> Option<(&str, &str)>{
    // let mut split = ty.split('.');
    match ty {
        {{#each variants }}
        {{to_screaming_snake_case this.rust_module}} => Some(("{{ this.subject_type }}", "{{ this.predicate }}")),
        {{/each}}
        _ => None,
    }
}

{{#each variants }}
impl From<{{this.rust_module}}::Content> for Content {
    fn from(value: {{this.rust_module}}::Content) -> Self {
        Self::{{to_class_case this.rust_module}}(value)
    }
}
{{/each}}

#[cfg(feature = "testkit")]
impl<> proptest::arbitrary::Arbitrary for Content {
    type Parameters = ();
    type Strategy = proptest::strategy::BoxedStrategy<Self>;

    fn arbitrary_with(_args: Self::Parameters) -> Self::Strategy {
        use proptest::prelude::*;
        prop_oneof![
{{#each variants }}
            any::<{{this.rust_module}}::Content>().prop_map(Content::from),
{{/each}}
        ].boxed()
    }
}

// #[cfg(test)]
// mod tests {
//     use super::*;
// 
//     #[test]
//     fn test_true() {
//         {{#each variants }}
//         assert_eq!(extract_subject_predicate({{to_screaming_snake_case this.rust_module}}), Some(("{{ this.subject }}","{{ this.predicate }}")));
//         {{/each}}
//     }
// }