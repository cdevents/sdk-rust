// code generated by cdevents/sdk-rust/generator (mod.hbs)
{{#each subjects }}
pub mod {{this.rust_module}};
{{/each}}

use serde::{Serialize, Deserialize};

#[derive(Debug,Clone,Serialize,Deserialize, PartialEq, Eq)]
#[serde(untagged)] // TODO how to use content of context.type as discriminator ?
pub enum Subject {
    {{#each subjects }}
    {{to_class_case this.rust_module}}({{this.rust_module}}::Subject),
    {{/each}}
}

impl Subject {
    pub fn from_json(ty: &str, json: serde_json::Value) -> Self{
        match ty {
            {{#each subjects }}
            "{{ this.context_type }}" => {
                let subject: {{this.rust_module}}::Subject = serde_json::from_value(json).unwrap();
                Self::{{to_class_case this.rust_module}}(subject)
            },
            {{/each}}
            x => todo!("no implementation for type '{}', please open an issue", x),
        }
    }
}